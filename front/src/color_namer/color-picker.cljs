(ns color-namer.color-picker)

#_(comment
  (defn long->rgb [code]
    [(quot code 65536) (mod (quot code 256) 256) (mod code 256)])

  (defn long->rgb-str [code]
    (str "#"
         (-> (.toString code 16)
             (.padStart 6 0))))

  (defn rgb-str->long [str]
    (-> (clojure.string/replace str #"#" "16r")
        (cljs.reader/read-string)))

;; -------------------------
;; Routes

  (def router
    (reitit/router
     [["/" :index]]))




  (defn long->rgb [code]
    [(quot code 65536) (mod (quot code 256) 256) (mod code 256)])

  (defn long->rgb-str [code]
    (str "#"
         (-> (.toString code 16)
             (.padStart 6 0))))

  (defn rgb-str->long [str]
    (-> (clojure.string/replace str #"#" "16r")
        (cljs.reader/read-string)))

;; -------------------------
;; Routes

  (def router
    (reitit/router
     [["/" :index]]))

  (defn path-for [route & [params]]
    (if params
      (:path (reitit/match-by-name router route params))
      (:path (reitit/match-by-name router route))))

;; -------------------------
;; Page components


  (defn send-input [input]
    (prn input)
    (http/post "http://localhost:3000/color/register" {:edn-params input}))



  (defn color-picker-component
    []
    (let [component-state (atom {})]
      (fn []
        [:div {:id "color-picker-component"}
         [:h4 {:style {:padding "20px"
                       :background-color @activated-color-cursor
                       :font-color "white"}}
          "Color picked : " @activated-color-cursor]
         [:input
          {:type "color"
           :on-change
           (fn [e]
             (swap! app-state update-in
                    [:canvas :activated :color]
                    (fn [_] (.. e -target -value))))}]])))

  (def color-info (atom []))

  (defn load-colors-info
    [colors-info]
    (go (let [response (<! (http/get "http://localhost:3000/color/find/all"))]
          (reset! colors-info (:body response))))
    colors-info)




  (defn update-name [color-info uid value]
    (map (fn [[name code id]]
           (if (= uid id)
             [value code id]
             [name code id])) color-info))

  (defn update-code [color-info uid value]
    (map (fn [[name code id]]
           (if (= uid id)
             [name value id]
             [name code id])) color-info))



  (defn home-page []
    (fn []
      [:span.main
       [:h1 "Welcome to color-namer"]]))

;; -------------------------
;; Page mounting component

  (defn current-page []
    (let [page (:current-page (session/get :route))
          page-info (atom "#000000")]
      (fn []
        [:div
         [:header
          [:h3 (str "current page name : " page)]
          [:footer
           [:p "This project was generated by the "
            [:a {:href "https://github.com/reagent-project/reagent-template"}
             "Reagent Template"] "."]]]])))

  (defn color-input-cell
    [[id name code]]
    [:div {:key (str "color-input-cell-" id)}
     [:h5 (str id "\t" name "\t" code)]
     [:input {:type  "color"
              :id (str "color-picker-" id)
              :name (str "color-" id)
              :value (str code)
              :on-change #(swap! color-info update-code  id
                                 (-> % .-target .-value rgb-str->long))}]
     [:input {:type "text" :id "input" :value name
              :on-change #(swap! color-info update-name  id
                                 (-> % .-target .-value))}]])


  (defn color-input-component []
    (let [component-state (atom {:color-info [[1 "blue" "#FF00FF"]]})]
      (fn []
        (let []
          [:div
           {:id "color-input-component"}
           (->> @component-state
                :color-info
                (map color-input-cell))
           [:button {:type "button" :id "load"
                     :on-click #(load-colors-info color-info)}
            " load cells"]]))))
  (defn sand-box []
    (let [component-state
          (atom {:box1 {:style {:width "min-content"
                                :height "10px"
                                :padding "20px"
                                :border "1px solid"}
                        :data-sizing "intrinsic"}})]
      (fn []
        [:div
         [:p @component-state
          "I am a paragraph of text that has a few words in it."]
         [:p (get-in @component-state [:style :data-sizing])]
         [:button
          {:value "click to change box."
           :on-click
           (fn [e]
             (case (get-in @component-state [:box1 :data-sizing])
               "intrinsic"
               (do
                 (swap! component-state assoc-in [:box1 :data-sizing] "extrinsic"))
               "extrinsic"
               (do
                 (swap! component-state assoc-in [:box1 :data-sizing] "intrinsic")
                 (swap! component-state assoc-in [:box1 :style :width] "min-content")
                 (swap! component-state assoc-in [:box1 :style :height] "min-content"))))}
          " change style"]
         [:p {:style {:width "200px"
                      :border "10px solid"
                      :padding "20px"}} "?"]
         [:p {:style {:width "200px"
                      :border "1px solid"}} "?"]
         [:article
          [:p {:style {:color "red" :font-size "1.5em"}} "abc"]
          [:p "bcd"]]])))

  )