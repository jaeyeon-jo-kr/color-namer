(ns color-namer.core
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require
   [reagent.core :as reagent :refer [atom cursor]]
   [reagent.dom :as rdom]
   [reagent.session :as session]
   [reagent.format :as format]
   [reitit.frontend :as reitit]
   [clerk.core :as clerk];; Notebook for clojure
   [accountant.core :as accountant];; SPA Simple
   [garden.core :refer [css]]
   [cljs-http.client :as http]
   [cljs.core.async :refer [<! >! chan]]))

(defonce app-state
  (atom {:canvas
         {:activated
          {:color "#102020"}}}))
                 
(defn long->rgb [code]
  [(quot code 65536) (mod (quot code 256) 256) (mod code 256)])

(defn long->rgb-str[code]
  (str "#"
       (-> (.toString code 16)
           (.padStart 6 0))))
  
(defn rgb-str->long[str]
  (-> (clojure.string/replace str #"#" "16r")
      (cljs.reader/read-string)))

;; -------------------------
;; Routes

(def router
  (reitit/router
   [["/" :index]]))

(defn path-for [route & [params]]
  (if params
    (:path (reitit/match-by-name router route params))
    (:path (reitit/match-by-name router route))))

;; -------------------------
;; Page components


(defn send-input [input]
  (prn input)
  (http/post "http://localhost:3000/color/register" {:edn-params input}))

(defn draw
  [context]
  (set! (.-fillStyle context)
        (get-in @app-state [:canvas :activated :color]))
  (.fillRect context 0 0 150 150))

(defn color-picker-component
  []
  (let [component-state (atom {})]
   (fn [] 
     [:div {:id "color-picker-component"}
      [:h4 "Color picked : "
       (cursor
        app-state
        [:canvas :activated :color])]
      [:input
       {:type "color"
        :on-change
        (fn [e]
          (swap! app-state update-in
                 [:canvas :activated :color]
                 (fn [_] (.. e -target -value))))}]])))

(def color-info (atom []))

(defn load-colors-info
  [colors-info]
  (go (let [response (<! (http/get "http://localhost:3000/color/find/all"))]
        (reset! colors-info (:body response))))
  colors-info)

(defn canvas []
  (let [component-status (atom {:status {}})]
    (fn []
      (let []
        [:div {:id "canvas-dev"}
         [:canvas
          {:id "canvas"
           :width 100
           :height 100
           :onClick
           (fn [c]
             (-> c
                 .-target
                 (.getContext "2d")
                 draw))}]]))))

(defn update-name [color-info uid value]
  (map (fn [[name code id]]
         (if (= uid id)
           [value code id]
           [name code id])) color-info))

(defn update-code [color-info uid value]
  (map (fn [[name code id]]
         (if (= uid id)
           [name value id]
           [name code id])) color-info))
  


(defn home-page []
  (fn []
    [:span.main
     [:h1 "Welcome to color-namer"]]))

;; -------------------------
;; Page mounting component

(defn current-page []
  (let [page (:current-page (session/get :route))
        page-info (atom "#000000")]
    (fn []
      [:div
       [:header
       [:h3 (str "current page name : " page)]
       [:footer
        [:p "This project was generated by the "
         [:a {:href "https://github.com/reagent-project/reagent-template"}
          "Reagent Template"] "."]]]])))

(defn color-input-cell 
  [[id name code]]
  [:div {:key (str "color-input-cell-" id)}
    [:h5 (str id "\t" name "\t" code)]
   [:input {:type  "color"
            :id (str "color-picker-" id)
            :name (str "color-" id)
            :value (str code)
            :on-change #(swap! color-info update-code  id
                               (-> % .-target .-value rgb-str->long))}]
   [:input {:type "text" :id "input" :value name
            :on-change #(swap! color-info update-name  id
                               (-> % .-target .-value))}]])


(defn color-input-component []
  (let [component-state (atom {:color-info [[1 "blue" "#FF00FF"]]})]
    (fn []
      (let []
        [:div
         {:id "color-input-component"}
         (->> @component-state
              :color-info
              (map color-input-cell))
         [:button {:type "button" :id "load"
                   :on-click #(load-colors-info color-info)}
          " load cells"]]))))

(defn home []
  [:div
   [:h3 "color input component"]
   [color-input-component]
   [:h3 "canvas"]
   [canvas]
   [:h3 "select-color-pick"]
   [color-picker-component]])

;; -------------------------
;; Initialize app
(defn mount-root []
  (rdom/render
   [home]
   (.getElementById js/document "app")))

;; -------------------------
;; Translate routes -> page components


(defn init! []
  (comment clerk/initialize!)
  (comment accountant/configure-navigation!
   {:nav-handler
    (fn [path]
      (let [match (reitit/match-by-path router path)
            current-page (:name (:data  match))
            route-params (:path-params match)]
        (js/alert (str "router : " router
                       "\npath :" path
                       "\nmatch : " match))
        (reagent/after-render clerk/after-render!)
        (session/put! :route {:current-page (page-for current-page)
                              :route-params route-params})
        (clerk/navigate-page! path)))
    :path-exists?
    (fn [path]
      (boolean (reitit/match-by-path router path)))})
  (comment (accountant/dispatch-current!))
  (mount-root))
