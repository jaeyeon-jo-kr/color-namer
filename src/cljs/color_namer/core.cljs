(ns color-namer.core
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require
   [reagent.core :as reagent :refer [atom]]
   [reagent.dom :as rdom]
   [reagent.session :as session]
   [reitit.frontend :as reitit]
   [clerk.core :as clerk]
   [accountant.core :as accountant]
   [cljs-http.client :as http]
   [cljs.core.async :refer [<!]]))

;; -------------------------
;; Routes

(def router
  (reitit/router
   [["/" :index]]))

(defn path-for [route & [params]]
  (if params
    (:path (reitit/match-by-name router route params))
    (:path (reitit/match-by-name router route))))

;; -------------------------
;; Page components


(defn send-input [input]
  (http/post "http://localhost" {:edn-params {:foo :bar}}))

(defn load-color-name-info [color-name-id]
  (http/get "http://localhost:3000" {:edn-params {:id 1}}))

(def color-name (atom "abcd"))
(defn color-input-compnent 
  []
  (let [a "a"]
    [:div
     [:input {:type  "color" :id "color-picker" :name "name"}]
     [:input {:type "text" :id "input" :on-change #(reset! color-name (-> % .-target .-value))}]
     [:h3 @color-name]
     [:button {:type "button" :onClick #(reset! color-name (str %))} "Save input"]]))

(defn home-page []
  (fn []
    [:span.main
     [:h1 "Welcome to color-namer"]
     (color-input-compnent)]))

;; -------------------------
;; Page mounting component

(defn current-page []
  (fn []
    (let [page (:current-page (session/get :route))]
      [:div
       [:header
        [:p [:a {:href (path-for :index)} "Home"] " | "
         [:a {:href (path-for :about)} "About color-namer"]]]
       [page]
       [:footer
        [:p "color-namer was generated by the "
         [:a {:href "https://github.com/reagent-project/reagent-template"} "Reagent Template"] "."]]])))



;; -------------------------
;; Translate routes -> page components

(defn page-for [route]
  (case route
    :index #'home-page))


;; -------------------------
;; Initialize app

(defn mount-root []
  (rdom/render [current-page] (.getElementById js/document "app")))

(defn init! []
  (clerk/initialize!)
  (accountant/configure-navigation!
   {:nav-handler
    (fn [path]
      (let [match (reitit/match-by-path router path)
            current-page (:name (:data  match))
            route-params (:path-params match)]
        (reagent/after-render clerk/after-render!)
        (session/put! :route {:current-page (page-for current-page)
                              :route-params route-params})
        (clerk/navigate-page! path)))
    :path-exists?
    (fn [path]
      (boolean (reitit/match-by-path router path)))})
  (accountant/dispatch-current!)
  (mount-root))
