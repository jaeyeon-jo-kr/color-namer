(ns color-namer.core
  (:require-macros [cljs.core.async.macros :refer [go]])
  (:require
   [reagent.core :as reagent :refer [atom]]
   [reagent.dom :as rdom]
   [reagent.session :as session]
   [reagent.format :as format]
   [reitit.frontend :as reitit]
   [clerk.core :as clerk]
   [accountant.core :as accountant]
   [cljs-http.client :as http]
   [cljs.core.async :refer [<! >! chan]]))


(defn long->rgb [code]
  [(quot code 65536) (mod (quot code 256) 256) (mod code 256)])

(defn long->rgb-str[code]
  (str "#"
       (-> (.toString code 16)
           (.padStart 6 0))))
  
(defn rgb-str->long[str]
  (-> (clojure.string/replace str #"#" "16r")
      (cljs.reader/read-string)))

;; -------------------------
;; Routes

(def router
  (reitit/router
   [["/" :index]]))

(defn path-for [route & [params]]
  (if params
    (:path (reitit/match-by-name router route params))
    (:path (reitit/match-by-name router route))))

;; -------------------------
;; Page components


(defn send-input [input]
  (prn input)
  (http/post "http://localhost:3000/color/register" {:edn-params input}))



(def color-info (atom []))

(defn load-colors-info [colors-info]
  (go (let [response (<! (http/get "http://localhost:3000/color/find/all"))]
        (reset! colors-info (:body response))))
  colors-info)

(defn canvas []
  [:div {:id "canvas-dev"}
   [:canvas {:id "canvas" :width 150 :height 150}]])


(defn update-name [color-info uid value]
  (map (fn [[name code id]]
         (if (= uid id)
           [value code id]
           [name code id])) color-info))

(defn update-code [color-info uid value]
  (map (fn [[name code id]]
         (if (= uid id)
           [name value id]
           [name code id])) color-info))
  
(defn color-input-cell 
  [id name code]
  [:div {:key (str "color-input-cell-" id)}
    [:h5 (str id name code)]
   [:input {:type  "color" :id (str "color-picker-" id) :name (str "color-" id) :value (str code)
            :on-change #(swap! color-info update-code  id (-> % .-target .-value rgb-str->long))}]
   [:input {:type "text" :id "input" :value name
            :on-change #(swap! color-info update-name  id (-> % .-target .-value))}]])

(defn color-input-component
  []
  [:div {:id "color-input-component"}
   (map (fn [[name code id]]
          (color-input-cell id name (long->rgb-str code))) @color-info)
   [:button {:type "button" :id "load" :on-click #(load-colors-info color-info)} "load cells"]])
  

(defn home-page []
  (fn []
    [:span.main
     [:h1 "Welcome to color-namer"]
     (color-input-component)
     [:h3 "canvas"]
     (canvas)]))

;; -------------------------
;; Page mounting component

(defn current-page []
  (fn []
    (let [page (:current-page (session/get :route))]
      [:div
       [:header
        [:p [:a {:href (path-for :index)} "Home"] " | "
         [:a {:href (path-for :about)} "About color-namer"]]]
       [page]
       [:footer
        [:p "color-namer was generated by the "
         [:a {:href "https://github.com/reagent-project/reagent-template"} "Reagent Template"] "."]]])))


;; -------------------------
;; Translate routes -> page components

(defn page-for [route]
  (case route
    :index #'home-page))


;; -------------------------
;; Initialize app

(defn mount-root []
  (rdom/render [current-page] (.getElementById js/document "app")))

(defn init! []
  (clerk/initialize!)
  (accountant/configure-navigation!
   {:nav-handler
    (fn [path]
      (let [match (reitit/match-by-path router path)
            current-page (:name (:data  match))
            route-params (:path-params match)]
        (reagent/after-render clerk/after-render!)
        (session/put! :route {:current-page (page-for current-page)
                              :route-params route-params})
        (clerk/navigate-page! path)))
    :path-exists?
    (fn [path]
      (boolean (reitit/match-by-path router path)))})
  (accountant/dispatch-current!)
  (mount-root))
