(ns event_server.handler)

(defn init
  [req state]
  (let [opts #erl{:compress     true
                  :idle_timeout 600000}]
    #erl[:cowboy_websocket req state opts]))

(defn build-reply
  [& keyvals]
  #erl[:text
       (jsx/encode
               (apply hash-map keyvals))])

(defn websocket_init [state]
  (let [erlang-version  (-> :system_version
                            erlang/system_info
                            erlang/list_to_binary)
        clojerl-version (str "Clojerl " (clojure-version))
        message         (str erlang-version
                             clojerl-version "\n")]
    #erl[:reply message state]))

(defn* websocket_handle [#erl[:text data] state]
  (let* [json          (jsx/decode data #erl(:return_maps))]
        #erl[:reply json state]))

(defn* websocket_info
  ([#erl[:client-count c] state]
   (let [out-frame #erl{:client_count c}]
     #erl[:reply out-frame state]))
  ([_info state]
   #erl[:ok state]))